
#include "d3m.hsp"

;上手が「王将」をもち、下手(先手)が「玉将」をもつ

#const PieceType_None	0	;無し
#const PieceType_Pawn	1	;歩兵
#const PieceType_Lance	2	;香車
#const PieceType_Knight	3	;桂馬
#const PieceType_Silver	4	;銀将
#const PieceType_Gold	5	;金将
#const PieceType_Bishop	6	;角行
#const PieceType_Rook	7	;飛車
#const PieceType_Gem	8	;玉将
#const PieceType_King	9	;王将

#const PromoteBias	10	;成るための下駄

#const PieceTypeCount	PromoteBias*2

#const TextureSize 128

	buffer 2, TextureSize*PieceTypeCount, TextureSize*2

	
	font "MS Mincho", TextureSize*3/4, 17

	labels = "　歩香桂銀金角飛玉王　と杏圭全　馬龍　　"
		
	repeat 2
		col = cnt
		
		repeat TextureSize
			x = cnt
			dx = cnt-TextureSize/2
			repeat TextureSize
				y = cnt
				dy = cnt-TextureSize/2
				
				d2 = sqrt( dx*dx+dy*dy )
	

				if col=0 {
					dc = 48-48*d2/(TextureSize/2)
					r = limit( 224+dc, 0, 255 )
					g = limit( 192+dc, 0, 255 )
					b = limit( 64+dc, 0, 255 )
				} else {
					dc = 64-96*d2/(TextureSize/2)
					r = limit( 255+dc, 0, 255 )
					g = limit( 64+dc, 0, 255 )
					b = limit( 48+dc, 0, 255 )
				}
	
				color r, g, b
				pset x, col*TextureSize+y
			loop
		loop
	
		repeat PieceTypeCount
			pro = cnt
	
			pos TextureSize*cnt, col*TextureSize
			if cnt: gcopy 2, 0, col*TextureSize, TextureSize, TextureSize
	
			type = cnt
			if pro<PromoteBias: color 192, 160, 32: else: color 224, 160, 32
			repeat 49
				pos type*TextureSize+16-cnt\7+3, col*TextureSize+8-cnt/7+3
				mes strmid( labels, type*2, 2 )
			loop
			if pro<PromoteBias: color 64, 32, 16: else: color 240, 32, 16
			repeat 9
				pos type*TextureSize+16-cnt\3+1, col*TextureSize+8-cnt/3+1
				mes strmid( labels, type*2, 2 )
			loop
			if pro<PromoteBias: color: else: color 255, 0, 0
			repeat 1
				pos type*TextureSize+16-cnt\2, col*TextureSize+8-cnt/2
				mes strmid( labels, type*2, 2 )
			loop
		loop

	loop

	dim pieces, 9, 9, 2

	pieces.0.0.0 = PieceType_Lance, PieceType_Knight, PieceType_Silver, PieceType_Gold, PieceType_Gem, PieceType_Gold, PieceType_Silver, PieceType_Knight, PieceType_Lance
	pieces.0.1.0 = PieceType_None, PieceType_Bishop, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_Rook, PieceType_None
	pieces.0.2.0 = PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn
	pieces.0.3.0 = PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None
	pieces.0.4.0 = PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None
	pieces.0.5.0 = PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None
	pieces.0.6.0 = PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn, PieceType_Pawn
	pieces.0.7.0 = PieceType_None, PieceType_Rook, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_None, PieceType_Bishop, PieceType_None
	pieces.0.8.0 = PieceType_Lance, PieceType_Knight, PieceType_Silver, PieceType_Gold, PieceType_King, PieceType_Gold, PieceType_Silver, PieceType_Knight, PieceType_Lance
	pieces.0.0.1 = 1, 1, 1, 1, 1, 1, 1, 1, 1
	pieces.0.1.1 = 0, 1, 0, 0, 0, 0, 0, 1, 0
	pieces.0.2.1 = 1, 1, 1, 1, 1, 1, 1, 1, 1
	pieces.0.3.1 = 0, 0, 0, 0, 0, 0, 0, 0, 0
	pieces.0.4.1 = 0, 0, 0, 0, 0, 0, 0, 0, 0
	pieces.0.5.1 = 0, 0, 0, 0, 0, 0, 0, 0, 0
	pieces.0.6.1 = 2, 2, 2, 2, 2, 2, 2, 2, 2
	pieces.0.7.1 = 0, 2, 0, 0, 0, 0, 0, 2, 0
	pieces.0.8.1 = 2, 2, 2, 2, 2, 2, 2, 2, 2

	buffer 3, TextureSize*4, TextureSize


	color 64, 32, 16
	boxf 0, 0, TextureSize-1, TextureSize-1
	
	color 128, 96, 32
	boxf 4, 4, TextureSize-5, TextureSize-5

	pos TextureSize, 0
	gcopy 3, 0, 0, TextureSize, TextureSize
	
	repeat TextureSize-12, 6
		x = cnt
		dx = cnt-TextureSize/2
		repeat TextureSize-12, 6
			y = cnt
			dy = cnt-TextureSize/2
			
			d2 = sqrt( dx*dx+dy*dy )

			dc = 32-32*d2/(TextureSize/2)
			if dc<0: dc = 0

			r = limit( 192+dc, 0, 255 )
			g = limit( 160+dc, 0, 255 )
			b = limit( 48+dc, 0, 255 )


			color r, g, b
			pset x, y
			
			r = limit( 160+dc, 0, 255 )
			g = limit( 128+dc, 0, 255 )
			b = limit( 96+dc, 0, 255 )
			
			color r, g, b
			pset x+TextureSize, y
		loop
	loop


	buffer 4, 640, 400
	
	screen 0, 640, 400

	starta = 5.1-3.14
	startz = 40.0
	ta = 5.1
	tz = 40.0

	rotationPhase = 0.0
	deltaPhase = 0.0
	
	rotating = 1
	endRotate = 0
	askPromote = 0

	selectedX = 255
	selectedY = 255

	currentPlayer = 1

	currentTime = d3timer()

*l_MainLoop
	frame++

	await

	dt = d3timer()-currentTime
	currentTime = d3timer()

	gsel 0
	redraw 0
	color: boxf

	if askPromote {

		gsel 0
		getkey lbutton, 1
		stick click
		if click&256 {
			askPromote = 0

			if mousex<320: pieces.moveX.moveY.0 += PromoteBias
			currentPlayer = 3-currentPlayer
			rotating = 1
			rotationPhase = 0.0
			starta = ta
			startz = tz
			ta += 3.1415
		}
		

	} else: if rotating {

		if rotationPhase<0.75{
			deltaPhase += 0.00003*dt
		} else: if rotationPhase>0.99 {
			deltaPhase = 0.005
		} else {
			deltaPhase -= 0.00009*dt
			if deltaPhase<0.01: deltaPhase = 0.01
		}

		rotationPhase += deltaPhase*0.01*dt
		if rotationPhase>1.0: rotationPhase = 1.0: rotating = 0: endRotate = 1

		zf = (rotationPhase-0.5)*(rotationPhase-0.5)*(rotationPhase-0.5)*(rotationPhase-0.5)*16

		tz = zf*40.0
		tzz = -zf*5.0
		cameraDistance = zf*5.0+45.0
		
		angle = ta*rotationPhase + starta*(1.0-rotationPhase)
		cz = tz

	} else {
		gsel 0
		
		stick click
		if click&256 {

			clickx = mousex
			clicky = mousey
	
			gsel 4

			pget clickx, clicky
	
			if ginfo_r!=255 {
				if pieces.ginfo_r.ginfo_g.1=currentPlayer & pieces.ginfo_r.ginfo_g.0!=PieceType_None {
					selectedX = ginfo_r
					selectedY = ginfo_g
				}
			}
			moveX = selectedX
			moveY = selectedY
			

		}

		if selectedX!=255 {
			gsel 0
			
			getkey lbutton, 1
			if lbutton {
				dragx = mousex
				dragy = mousey

				gsel 4
				pget dragx, dragy

				if ginfo_r!=255 {
					moveX = ginfo_r
					moveY = ginfo_g
				}
			} else {
				if moveX!=selectedX | moveY!=selectedY {
					x = moveX
					y = moveY
					gosub *l_JudgeMovable
					if movable=0 {
						; 負け処理
					} else {
						; 移動処理

						pieces.moveX.moveY.0 = pieces.selectedX.selectedY.0
						pieces.moveX.moveY.1 = pieces.selectedX.selectedY.1
						pieces.selectedX.selectedY.0 = PieceType_None
						pieces.selectedX.selectedY.1 = 0
						
						gosub *l_JudgePromotable

						if promotable=2: pieces.moveX.moveY.0 += PromoteBias
						if promotable=1 {
							askPromote = 1
						} else {
							currentPlayer = 3-currentPlayer
							rotating = 1
							rotationPhase = 0.0
							starta = ta
							startz = tz
							ta += 3.1415
						}
					}
				}
				selectedX = 255
				selectedY = 255
			}
		}
	}

	gsel 4

	d3setcam cos(angle)*cameraDistance, sin(angle)*cameraDistance, 10.0+cz*cameraDistance/50.0, -sin(angle)*3.0, cos(angle)*3.0, tzz, 0.5

	if endRotate {

		gmode 0

		color 255, 255, 255: boxf
	
		repeat 9
			x = cnt
			repeat 9
				y = cnt
				
				xs = 4.0*x-18.0, 4.0*x-14.0, 4.0*x-14.0, 4.0*x-18.0
				ys = 4.0*y-18.0, 4.0*y-18.0, 4.0*y-14.0, 4.0*y-14.0
				zs = 0.0, 0.0, 0.0, 0.0
	
				color x, y, 0
	
				d3square xs, ys, zs
			loop
		loop

		endRotate = 0
	}

	gsel 0

	gmode 0
	
	repeat 9
		x = cnt
		repeat 9
			y = cnt
			
			xs = 4.0*x-18.0, 4.0*x-14.0, 4.0*x-14.0, 4.0*x-18.0
			ys = 4.0*y-18.0, 4.0*y-18.0, 4.0*y-14.0, 4.0*y-14.0
			zs = 0.0, 0.0, 0.0, 0.0

			gosub *l_JudgeMovable

			d3texture xs, ys, zs, 3, movable*TextureSize+1, 1, TextureSize-2, TextureSize-2
		loop
	loop

	repeat 9
		x = cnt
		repeat 9
			y = cnt

			type = pieces.x.y.0
			player = pieces.x.y.1
			col = 0

			if type==PieceType_None: continue

			if x=selectedX & y=selectedY {
				gmode 3, , , 64
			} else {
					gmode 0
			}


			gosub *l_DrawPiece
	
		loop
	loop

	if selectedX!=255 {

		gmode 3, , , 64

		x = moveX
		y = moveY
		type = pieces.selectedX.selectedY.0
		player = pieces.selectedX.selectedY.1
		col = 1
		
			gosub *l_DrawPiece
	}

	if askPromote {
		font "Arial", 64
		color 192, 192, 192

		pos 60, 100
		mes "Are you promote?"

		if mousex<320: color 255, 0, 0: else: color 192, 192, 192
		pos 80, 200
		mes "YES"

		if mousex>=320: color 255, 0, 0: else: color 192, 192, 192
		pos 400, 200
		mes "NO"		
	}
	
	font "Arial", 24, 1
	color 192, 192, 192
	pos 0, 0
	mes "FPS="+d3getfps()

	redraw 1
	
goto *l_MainLoop


*l_transCoordinate

	repeat 4

		ys.cnt -= 0.25
		if player = 2: xs.cnt = -xs.cnt: ys.cnt = -ys.cnt
		
		xs.cnt = xs.cnt*scale+x*4.0-16.0
		ys.cnt = ys.cnt*scale+y*4.0-16.0
		zs.cnt = zs.cnt*scale

	loop

return

*l_JudgeMovable

	movable = 0

	if selectedX=255: return

	if pieces.x.y.1=currentPlayer: return
	if pieces.selectedX.selectedY.0=PieceType_None: return

	if currentPlayer=1: deltaY = 1: else: deltaY = -1

	switch pieces.selectedX.selectedY.0
		case PieceType_Pawn
			movable = ( x=selectedX & y=(selectedY+deltaY) )
		swbreak
		case PieceType_Lance
			if deltaY<0 {
				movable = ( x=selectedX & y<selectedY )
			} else {
				movable = ( x=selectedX & y>selectedY )
			}
			if movable {
				repeat abs( y-selectedY )-1, 1
					if pieces( selectedX, selectedY+cnt*deltaY )!=PieceType_None: movable = false: break
				loop
			}
		swbreak
		case PieceType_Knight
			movable = ( x=selectedX-1 | x=selectedX+1 ) & (y = selectedY+deltaY*2 )
		swbreak
		case PieceType_Silver
			movable = ( abs( x-selectedX )<=1 & y=selectedY+deltaY ) | ( abs( x-selectedX )=1 & y=selectedY-deltaY )
		swbreak
		case PieceType_Bishop
			movable = abs( x-selectedX )=abs( y-selectedY )
			if x<selectedX: ddx = -1: else: ddx = 1
			if y<selectedY: ddy = -1: else: ddy = 1
			if movable {
				repeat abs( y-selectedY )-1, 1
					if pieces( selectedX+cnt*ddx, selectedY+cnt*ddy )!=PieceType_None: movable = false: break
				loop
			}
		swbreak
		case PieceType_Rook
			if x=selectedX {
				movable = 1
				if y<selectedY: ddy = -1: else: ddy = 1
				repeat abs( y-selectedY )-1, 1
					if pieces( selectedX, selectedY+cnt*ddy )!=PieceType_None: movable = false: break
				loop
			} else: if y=selectedY {
				movable = 1
				if x<selectedX: ddx = -1: else: ddx = 1
				repeat abs( x-selectedX )-1, 1
					if pieces( selectedX+cnt*ddx, selectedY )!=PieceType_None: movable = false: break
				loop
			}
		swbreak
		case PieceType_Gem
		case PieceType_King
			movable = abs( x-selectedX )<=1 & abs( y-selectedY )<=1
		swbreak
		case PieceType_Bishop+PromoteBias
			if abs( x-selectedX )<=1 & abs( y-selectedY )<=1 {
				movable = 1
			} else {
				movable = abs( x-selectedX )=abs( y-selectedY )
				if x<selectedX: ddx = -1: else: ddx = 1
				if y<selectedY: ddy = -1: else: ddy = 1
				if movable {
					repeat abs( y-selectedY )-1, 1
						if pieces( selectedX+cnt*ddx, selectedY+cnt*ddy )!=PieceType_None: movable = false: break
					loop
				}
			}
		swbreak
		case PieceType_Rook+PromoteBias
			if abs( x-selectedX )<=1 & abs( y-selectedY )<=1 {
				movable = 1
			} else {
				if x=selectedX {
					movable = 1
					if y<selectedY: ddy = -1: else: ddy = 1
					repeat abs( y-selectedY )-1, 1
						if pieces( selectedX, selectedY+cnt*ddy )!=PieceType_None: movable = false: break
					loop
				} else: if y=selectedY {
					movable = 1
					if x<selectedX: ddx = -1: else: ddx = 1
					repeat abs( x-selectedX )-1, 1
						if pieces( selectedX+cnt*ddx, selectedY )!=PieceType_None: movable = false: break
					loop
				}
			}
		swbreak
		case PieceType_Gold
		default
			movable = ( abs( x-selectedX )<=1 & y=selectedY+deltaY ) | ( abs( x-selectedX )=1 & y=selectedY ) | ( x=selectedX & y=selectedY-deltaY )
		swbreak
	swend

return

*l_DrawPiece

			switch type\PromoteBias
				case PieceType_Pawn
					scale = 0.9
				swbreak
				case PieceType_Lance
					scale = 1.0
				swbreak
				case PieceType_Knight
					scale = 1.1
				swbreak
				case PieceType_Silver
					scale = 1.2
				swbreak
				case PieceType_Gold
					scale = 1.2
				swbreak
				case PieceType_Bishop
					scale = 1.35
				swbreak
				case PieceType_Rook
					scale = 1.35
				swbreak
				case PieceType_Gem
					scale = 1.4
				swbreak
				case PieceType_King
					scale = 1.4
				swbreak
			swend

			
			xs = 0.0, 0.0, 0.875, -0.875
			ys =  1.5, 1.5, 1.0, 1.0
			zs = 0.0, 0.0, 0.0, 0.0
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+16, col*TextureSize+1, TextureSize-32, 4-1
			
			xs = -0.875, -0.875, -0.875, -1.2
			ys =  1.0, 1.0, -1.0, -1.0
			zs = 0.0, 0.0, 0.0, 0.0
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+1, col*TextureSize+4, 16-1, TextureSize-8
			
			xs = 0.875, 0.875, 0.875, 1.2
			ys =  1.0, 1.0, -1.0, -1.0
			zs = 0.0, 0.0, 0.0, 0.0
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+112, col*TextureSize+4, 16-1, TextureSize-8
			
			xs = -0.875, 0.875, 0.875, -0.875
			ys =  1.0, 1.0, -1.0, -1.0
			zs = 0.0, 0.0, 0.0, 0.0
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+16, col*TextureSize+4, TextureSize-32, TextureSize-8


			
		
			xs = 0.0, 0.0, -0.875, -0.875
			ys =  1.5, 1.5, 1.0, 1.0
			zs = 0.0, 0.35, 0.4, 0.0
	
			gosub *l_transCoordinate
		
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+1, col*TextureSize+1, TextureSize-2, TextureSize-2
		
			xs = 0.875, 0.875, 0.0, 0.0
			ys = 1.0, 1.0, 1.5, 1.5
			zs = 0.0, 0.4, 0.35, 0.0
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+1, col*TextureSize+1, TextureSize-2, TextureSize-2
	
			xs = -0.875, -0.875, -1.2, -1.2
			ys =  1.0, 1.0, -1.0, -1.0
			zs = 0.0, 0.4, 0.6, 0.0
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+1, col*TextureSize+1, TextureSize-2, TextureSize-2
		
			xs = 1.2, 1.2, 0.875, 0.875
			ys = -1.0, -1.0, 1.0, 1.0
			zs = 0.0, 0.6, 0.4, 0.0
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+1, col*TextureSize+1, TextureSize-2, TextureSize-2
			
			xs = -1.2, -1.2, 1.2, 1.2
			ys = -1.0, -1.0, -1.0, -1.0
			zs = 0.0, 0.6, 0.6, 0.0
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, PieceType_None*TextureSize+1, col*TextureSize+1, TextureSize-2, TextureSize-2
		
	
			
			xs = 0.0, 0.0, 0.875, -0.875
			ys =  1.5, 1.5, 1.0, 1.0
			zs = 0.35, 0.35, 0.4, 0.4
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, type*TextureSize+16, col*TextureSize+1, TextureSize-32, 4-1
			
			xs = -0.875, -0.875, -0.875, -1.2
			ys =  1.0, 1.0, -1.0, -1.0
			zs = 0.4, 0.4, 0.6, 0.6
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, type*TextureSize+1, col*TextureSize+4, 16-1, TextureSize-8
			
			xs = 0.875, 0.875, 1.2, 0.875
			ys =  1.0, 1.0, -1.0, -1.0
			zs = 0.4, 0.4, 0.6, 0.6
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, type*TextureSize+TextureSize-16, col*TextureSize+4, 16-1, TextureSize-8
			
			xs = -0.875, 0.875, 0.875, -0.875
			ys =  1.0, 1.0, -1.0, -1.0
			zs = 0.4, 0.4, 0.6, 0.6
		
			gosub *l_transCoordinate
			
			d3texture xs, ys, zs, 2, type*TextureSize+16, col*TextureSize+4, TextureSize-32, TextureSize-8
	
return

*l_JudgePromotable


	promotable = 0

	switch pieces.moveX.moveY.0
		case PieceType_Pawn
		swbreak
		case PieceType_Lance
		swbreak
		case PieceType_Knight
		swbreak
		case PieceType_Silver
		swbreak
		case PieceType_Bishop
		swbreak
		case PieceType_Rook
		swbreak
		default
			return
	swend

	if currentPlayer=1 {
		if moveY>=6 | selectedY>=6{
			promotable = 1
			if pieces.moveX.moveY.0=PieceType_Pawn & moveY=8: promotable = 2
			if pieces.moveX.moveY.0=PieceType_Lance & moveY=8: promotable = 2
			if pieces.moveX.moveY.0=PieceType_Knight & moveY>=7: promotable = 2
		}
	} else {
		if moveY<3 | selectedY<3 {
			promotable = 1
			if pieces.moveX.moveY.0=PieceType_Pawn & moveY=0: promotable = 2
			if pieces.moveX.moveY.0=PieceType_Lance & moveY=0: promotable = 2
			if pieces.moveX.moveY.0=PieceType_Knight & moveY<=1: promotable = 2
		}
	}

return