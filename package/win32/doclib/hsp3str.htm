<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta http-equiv="Content-Language" content="ja">
	<meta http-equiv="Content-Style-Type" content="text/css">
	<meta http-equiv="Content-Script-Type" content="text/javascript">
	<meta name="author" content="OpenHSP3 Project">
	<meta name="keywords" content="HSP3,HotSoupProcessor3,文字列,文字コード">
	<meta name="description" content="HSP3で扱う文字列に関する資料">
	<link href="../main.css" rel="stylesheet" type="text/css" media="all">
	<link href="../single.css" rel="stylesheet" type="text/css" media="all">
	<title>HSP3 文字列のひみつ（TIPS）</title>
</head>
<body>
	<div id="CONTAINER">
		<!-- ヘッダー -->
		<p id="COPY">HSP : Hot Soup Processor ver3.6 / onion software 1997-2021(c)</p>
		<img src="hsp3ttl.jpg" alt="title" width="640" height="200">
		<h1>HSP3 文字列のひみつ（TIPS）</h1>

		<!-- 目次 -->
		<ol>
			<li><a href="#FIRST">はじめに</a></li>
			<li><a href="#BASIC">文字列の基本</a></li>
			<li><a href="#WHATIS">文字列とは何か？</a></li>
			<li><a href="#BUF">文字列とバッファ</a></li>
			<li><a href="#ABOUTSTRING">文字列のしくみ</a></li>
			<li><a href="#ABOUTTEXT">テキストファイルのしくみ</a></li>
			<li><a href="#ABOUTMULTILINE">複数行文字列のしくみ</a></li>
			<li><a href="#ABOUTMEMNOTE">メモリーノートパッド命令のしくみ</a></li>
			<li><a href="#FUNC">文字列操作関数</a></li>
			<li><a href="#ABOUTJPN">日本語文字列のしくみ</a></li>
			<li><a href="#LAST">最後に</a></li>
		</ol>

		<h2 id="FIRST">はじめに</h2>
		<p>
			HSPでは、数値型、文字列型などの型を変数の内容として保持することができます。
			このドキュメントでは、その中でも文字列型がどのようにHSPで処理されているかを説明しながら、
			それぞれの命令の詳細と、その応用についての説明をしています。
		</p>
		<p>
			文字列の取り扱いを理解することで、より細かく文字列の操作を行なうことができるはずです。
			また、メモリ管理やファイルの扱いに関係する部分もあるので、知っておくときっと役に立つ時が
			来るでしょう。
		</p>
		
		<h2 id="BASIC">文字列の基本</h2>
		<p>
			まず、HSPでの文字列の取り扱いの基本をおさらいしておきましょう。
			文字列とは、"（半角ダブルクォーテーション）で囲まれた、文字の集合体です。
			HSPでは、メッセージの表示や、ファイル名などあらゆる場面で文字列を使用します。
		</p>
		<p>
			たとえば<code>mes "TEST MESSAGE"</code>
			という命令では、「"」で囲まれた「TEST MESSAGE」という文字列を画面に表示します。
		</p>
		<p>
			また、変数に文字列を記憶させておくこともできます。
			たとえば、<code>a="TEST MESSAGE"</code>のように書けば、変数aに「TEST MESSAGE」という文字列が
			記憶されます。そうすれば、<code>mes a</code>のように文字列を指定するかわりに
			変数名を指定して、変数に記憶されている文字列をパラメータとして使うことができるようになります。
		</p>
		<p>
			以上は基本ですが、この応用として文字列に式を加えることができるようになっています。
		</p>
		<p>
			たとえば、<code>a="TEST"+" MESSAGE"</code>という命令では、「TEST」という文字列と、
			「 MESSAGE」という文字列を「+」で足し算しています。
			数値の計算ならば、加算されるところですが、文字列を足し算した場合は、文字列が連結されます。
			つまり、2つの文字列をつなげて「TEST MESSAGE」という文字列になるのです。
			文字列で使える式は、足し算のみですが<code>a="ABC"+"DEF"+"GHI"</code>のようにいくつも繋げることが
			できますし、<code>a="ABC"+b+"DEF"+c</code>のように間に変数をはさむことも可能です。ですから、
		</p>
		<pre>    a="TEST"
    b=" AND "
    c="MESSAGE"
    print a+b+c</pre>
		<p>
			のようにすると、3つの変数の内容が連結されて「TEST AND MESSAGE」という文字列が画面に
			表示されます。もしこれが、文字列型の変数でなく、数値が記憶されている数値型変数を途中で
			足し算した場合には、どうなるのでしょうか? 
		</p>
		<p>
			HSPでは、次のようなお約束があります。
		</p>
		<ul>
			<li>「文字列型」に「数値型」を足し算した場合には、「数値」を文字列にして連結される。</li>
			<li>「数値型」に「文字列型」を足し算した場合には、「文字列」を数値にして加算される。</li>
		</ul>
		<p>
			つまり、計算式で最初の項になっている型に自動的に合わせてくれるということです。ですから、
		</p>
		<pre>    a="TEST "
    b=12345
    c=" MESSAGE"
    print a+b+c</pre>
		<p>
			のように数値型の変数が間にあっても、「TEST 12345 MESSAGE」という表示になり、これは
			あくまで文字列として扱われます。
		</p>

		<h2 id="WHATIS">文字列とは何か?</h2>
		<p>
			HSPでは文字列をどのように管理しているのでしょうか?
			前にも言ったように、文字列は長さ不定の文字の集合体です。
			文字列型変数には、メモリの許す限り無制限の文字数を記憶することができます。
			ここで、「文字列」と「バッファ」の関係を知っておくと、文字列の扱いが
			よりスッキリとします。
		</p>
		<p>
			HSPでは、文字列の1文字1文字を「コード」という数値で扱って管理しています。
			これは、どんなコンピュータでも内部では数値で管理されているためです。
			下の表を見てみてください。
		</p>
		<table class="keywordlist">
		<caption>アスキーコード表</caption>
		<tr>
			<th>コード(10進数)</th>
			<th>コード(16進数)</th>
			<th>0</th>
			<th>1</th>
			<th>2</th>
			<th>3</th>
			<th>4</th>
			<th>5</th>
			<th>6</th>
			<th>7</th>
			<th>8</th>
			<th>9</th>
			<th>a</th>
			<th>b</th>
			<th>c</th>
			<th>d</th>
			<th>e</th>
			<th>f</th>
		</tr>
		<tr>
			<th>32</th>
			<th>$20</th>
			<td>　</td>
			<td>!</td>
			<td>"</td>
			<td>#</td>
			<td>$</td>
			<td>%</td>
			<td>&amp;</td>
			<td>'</td>
			<td>(</td>
			<td>)</td>
			<td>*</td>
			<td>+</td>
			<td>,</td>
			<td>-</td>
			<td>.</td>
			<td>/</td>
		</tr>
		<tr>
			<th>48</th>
			<th>$30</th>
			<td>0</td>
			<td>1</td>
			<td>2</td>
			<td>3</td>
			<td>4</td>
			<td>5</td>
			<td>6</td>
			<td>7</td>
			<td>8</td>
			<td>9</td>
			<td>:</td>
			<td>;</td>
			<td>&lt;</td>
			<td>=</td>
			<td>&gt;</td>
			<td>?</td>
		</tr>
		<tr>
			<th>64</th>
			<th>$40</th>
			<td>@</td>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
			<td>L</td>
			<td>M</td>
			<td>N</td>
			<td>O</td>
		</tr>
		<tr>
			<th>80</th>
			<th>$50</th>
			<td>P</td>
			<td>Q</td>
			<td>R</td>
			<td>S</td>
			<td>T</td>
			<td>U</td>
			<td>V</td>
			<td>W</td>
			<td>X</td>
			<td>Y</td>
			<td>Z</td>
			<td>[</td>
			<td>\</td>
			<td>]</td>
			<td>^</td>
			<td>_</td>
		</tr>
		<tr>
			<th>96</th>
			<th>$60</th>
			<td>`</td>
			<td>a</td>
			<td>b</td>
			<td>c</td>
			<td>d</td>
			<td>e</td>
			<td>f</td>
			<td>g</td>
			<td>h</td>
			<td>i</td>
			<td>j</td>
			<td>k</td>
			<td>l</td>
			<td>m</td>
			<td>n</td>
			<td>o</td>
		</tr>
		<tr>
			<th>112</th>
			<th>$70</th>
			<td>p</td>
			<td>q</td>
			<td>r</td>
			<td>s</td>
			<td>t</td>
			<td>u</td>
			<td>v</td>
			<td>w</td>
			<td>x</td>
			<td>y</td>
			<td>z</td>
			<td>{</td>
			<td>|</td>
			<td>}</td>
			<td>~</td>
			<td>　</td>
		</tr>
		</table>
		
		<p>
			これは<em>アスキーコード表</em>と呼ばれているものです。
			どんな文字にも、それに対応する数値(コード)があります。その中でも標準的に使われている、
			半角のアルファベットや記号だけを抜き出したものをアスキーコード
			( ASCII : American Standard Code for Information Interchange )
			といいます。英語ではこれで十分なのですが、日本語ではこの他に全角の文字が多数あり、
			それぞれにやはりコードがあります。
		</p>
		<p>
			これは何も難しい概念ではなくて、単純に「A」という文字はコード65(10進数)、「$」は
			36(10進数)というように数字に直すことができるよ、というだけの話です。
		</p>
		<p>
			この表の見かたは、たとえば「@」であれば左の「コード」にある数値の通り「64」になり、
			以後右にずれるたびに１づつふえていきます。つまり、「A」は65、「B」は66…というぐあいです。
			「コード」のところに10進数と、16進数が書いてありますが、コンピュータの世界では16進数だと
			区切りがいいということで、HSPでは10進数でもかまいませんし、16進数でももちろんOKです。
			(HSPで16進数は「$48」など$を頭につけて表記します)
			ですから、「N」は10進数では78、16進数では$6eになります。混乱すると困るので、ここでは
			特に表記がない限り、コードは10進数で扱っていきます。
		</p>
		<p>
			ちなみに、スペースキーを押して出てくるスペースは、コード32になります。
			他にスペースになっている場所もありますが、通常は使われません。
		</p>
		<p>
			さて、文字列は、このコードの集まりだと考えることができます。
			コードは、0から255までの数値になります。つまり256種類の文字を表わすことができるという
			わけです。しかし、日本語の漢字などを含めると膨大な量になり、とても256種類では足りません。
			そこで、HSPでは、日本語はコードを2つ使用して256種類×256種類＝65536種類(そんなにないけど)ぶんの
			コードを使うことにしています。
		</p>
		<p>
			日本語の文字が全角と呼ばれ、英文字が半角と呼ばれるのは、
			英文字(アスキーコード)が日本語文字に対して半分サイズのコードだからなのです。
			日本語コードの表わしかたには色々な種類がありますが、HSPが使用しているものは、
			シフトJIS(SJIS)と呼ばれているものです。このドキュメントでも、シフトJISに基づいた説明を行なっています。
		</p>
		<p>
			まずは、「文字を表わすコードが、いくつか並んでいるものが文字列」なのだということを
			ここでは覚えておいてください。これが何の役に立つか、もうすぐわかるはずですよ。
		</p>
		
		
		<h2 id="BUF">文字列とバッファ</h2>
		<p>
			文字は、0～255までの数値で表わされるコードにすることができることがわかりました。
			この、256種類という数字はコンピュータの世界ではよく出てくる1バイト(byte)という単位に
			なります。バイトとは、数値をコンピュータのメモリに記憶させる際の基本となる単位で、
			1バイトには、0～255までの数値を記憶させておくことができます。1メガバイトのメモリは、
			バイトに直すと、ざっと1,000,000バイトですからごくごく小さな単位です。
		</p>
		<p>
			こんなハード寄りの話を出したのは、難しくしたいためじゃありません。
			この1バイト、0～255までの数値というところでHSPの、poke命令およびpeek関数のことを
			思い出してもらいたかったからです。
		</p>
		<p>
			poke命令、peek関数はメモリバッファの読み書きをするための命令で、ちょっと文字列とは
			無縁な感じがします。しかしながら、<em>変数の内容が記憶されている場所もまた、
			メモリバッファの１つ</em>なのです。
		</p>
		<p>
			これは知っておくと役に立つ重要な概念です。文字列型変数に記憶されている文字列
			の内容や、数値型の変数、そして配列までもがpeek関数、poke命令で読み書き可能である
			ということです。同様に、メモリバッファを対象にした命令(bload命令やbsave命令)もすべて
			通常の変数に対して使用できます。
		</p>
		<p>
			ここでためしに、
		</p>
		<pre>    a="*"
    b=peek(a,0)
    mes "b="+b</pre>
		<p>
			というスクリプトを実行してみてください。変数aに代入された「*」という文字列が記憶されている
			バッファから、1バイトを取り出して表示していますが、「*」の文字コードである42という数値
			が取り出されています。このように、poke命令、peek関数を使うことで、記憶されている文字列に
			対してより細かなアクセスができることになります。
		</p>
		<p>
			これからいよいよ、その細かなアクセスの詳細について説明していきましょう。
		</p>
		
		
		<h2 id="ABOUTSTRING">文字列のしくみ</h2>
		<p>
			文字列が記憶されているバッファには一定のルールがあります。
			まずは、この重要なルールをまず最初に覚えておいてください。
		</p>
		<ul>
			<li>1バイトにつき1文字のコードが連続して置かれている。</li>
			<li>文字列の一番最後は、終わりを示すコードとして0が置かれている。</li>
		</ul>
		<p>
			この2つのルールさえわかってしまえば、あとはこれに従ってバッファをどういじっても問題
			ありません。まず簡単な例として次のようなスクリプトがあったとします。
		</p>
		<pre>a="ABCDE"</pre>
		<p>
			これが実行されると、変数aの内容が記憶されているバッファは次のようになります。
		</p>
		
		<table class="keywordlist">
			<caption>バッファの内容</caption>
			<tr>
				<th>文字列</th>
				<td>A</td>
				<td>B</td>
				<td>C</td>
				<td>D</td>
				<td>E</td>
				<td>終了コード</td>
			</tr>
			<tr>
				<th>バッファの内容</th>
				<td>65</td>
				<td>66</td>
				<td>67</td>
				<td>68</td>
				<td>69</td>
				<td>0</td>
			</tr>
		</table>
		<p>
			文字列「ABCDE」は、バッファの中では「65」「66」「67」「68」「69」「0」という数値に
			なって記憶されることになります。
		</p>
		<p>
			peek関数は、バッファの中の好きな場所から1バイト、
			データを取り出すことのできる命令です。ヘルプによれば、
		</p>
		<pre class="quote">peek(p1,p2)          バッファから1byte読み出し

p1=変数 : バッファを割り当てた変数名 
p2=0～ : バッファのインデックス(Byte単位) </pre>
		
		<p>
			ということなので、
		</p>
		<pre>    a="ABCDE"
    b=peek(a,2)</pre>
		<p>
			とすれば、変数aの3文字目にある文字のコードを読み出すことができます。
			なぜ3文字目になるかと言うと、peek命令の2番目のパラメータは、0から始まって1バイト
			ごとの指定なので、2を指定した場合は0・1・2の順で3文字目にあたるコードを取り出して
			いるためなのです。
		</p>
		<p>
			poke命令は逆にバッファにデータを書き込みための命令です。ヘルプによれば、
		</p>
		<pre class="quote">poke p1,p2,p3            バッファに1byte書き込み

p1=変数 : バッファを割り当てた変数名
p2=0～ : バッファのインデックス(Byte単位) 
p3=0～255 : バッファに書き込む値 または 文字列(Byte単位) </pre>
		<p>
			ということなので、たとえば、
		</p>
		<pre>    a=""
    poke a,0,65
    poke a,1,66
    poke a,2,67
    poke a,3,0
    mes a</pre>
		<p>
			とすれば、変数aには何も文字列を代入していないにもかかわらず、バッファに直接データを
			書き込んだために、「ABC」という文字列が記憶されています。
		</p>
		<p>
			忘れてはいけないのは、最後に終わりを示すコードとして0を入れておくことです。
			HSPは、0が出てくるまでバッファの内容を文字列として解釈します。もし、0を忘れてしまうと
			余計なデータを文字列に加えてしまったり、最悪の場合、一般保護エラーが出るまでメモリを
			読み続けてしまいます。
		</p>
		<p>
			この終わりを示すコードを逆手に取って次のようなこともできます。
		</p>
		<pre>    a="ABCDEF"
    poke a,3,0
    mes a</pre>
		<p>
			このスクリプトでは、変数aに「ABCDEF」という文字列を代入していますが、その後でpoke命令
			により、途中に終了コードを書き込まれています。その結果、「ABC」の後に終了コードがある
			ためにそこで文字列は終了と判断され、「ABC」という文字列だけしか表示されません。
		</p>
		<p>
			このように、文字列のしくみを理解することで、文字列の各文字に対してのアクセスが
			容易になります。
		</p>
		<p>
			バッファの中を読み出したり、書き込んだりする場合には注意しなければならない点があります。
			変数バッファに文字列は無制限に代入することができますが、最初から大きなサイズのバッファを
			用意するわけにはいきません。そこで、最初は小さな領域を確保しておき、必要に応じて
			領域を拡張しています。
		</p>
		<p>
			sdim命令により文字列の宣言を行なう際に、最初に確保する領域サイズを指定することができます。
			領域の拡張は自動で行なわれますが、最初から大きなサイズの文字列を使うことがわかっている場合や、
			2次元以上の配列を使う場合には指定をしておくといいでしょう。
		</p>
		<p>
			ただし、256バイトのバッファを確保したとしても、255文字までしか使うことはできません。
			最後に終了コード0を入れる場所が必要だからです。「sdim a,256」は、255文字＋終了コード
			までは領域を確保するという意味になります。
		</p>
		<p>
			peek関数やpoke命令は、現在確保されている領域内のみにしか使用することができません。
			たとえば、「sdim a,256」のように256バイトのバッファを確保していたとすれば、
			0～255の範囲しか利用できないので注意してください。
		</p>
		<p>
			文字列の一部を文字コードにして取り出したり、また逆に文字コードを文字列にするようなことは
			何かの時にあると便利です。よく使うテンプレートとして次の２つをあげておきます。
		</p>
		<pre>//例1: (文字コードを取り出す)
    b=peek(a,0)  ; 変数aの最初の文字コードを変数bに代入</pre>
		
		<pre>//例2: (文字コードを文字列にする)
    a="_"
    b=65
    poke a,0,b  ; 文字列型変数aに、変数bの文字コードを入れる</pre>
		<p>
			例2では、変数bに代入されている数値をpoke命令で文字コードとして書き込んでいます。
			これは、変数aの1文字目に上書きされます。変数aは、最初に「_」という1文字だけが代入
			されていますが、この「_」はなくなり、新しい文字コードに書き換わります。
			文字列の最後にある終わりのコード(0)は、最初の「a="_"」ですでに設定されているので、
			もう一度書き込む必要はありません。このような手順で、文字コードを1文字の文字列型変数
			に変換することができます。
		</p>
		<p>
			これらの例は、Microsoft系N-BASICを使った人であれば、ASC、CHR$といった関数と
			同じような働きと言えば分かりやすいかもしれません。文字コードを扱うことは、
			通常あまりないかもしれませんが、いざという時に小回りのきく手段として覚えておくといいでしょう。
		</p>
		<p>
			もう1つ便利な例をご紹介しましょう。
			peek関数を使えば、文字列の中から任意の場所にある1文字をコードとして取ってくることが
			できます。しかし、取り出すのはあくまでコード(数値)でありいちいちアスキーコード表と
			てらし合わせるのは面倒です。
		</p>
		<p>
			そんな時に使うと便利なのが「'（半角シングルクォーテーション）」
			による表記です。これは、「'A'」のように1文字を「'」で囲んで使用します。こうすると、
			「'A'」は「65」と同じ意味になります。つまり、「'」で囲んだ文字をコードに直してくれる
			のです。ですから、
		</p>
		<pre>    a="***TEST"
    b=peek(a,0)
    if b='*' : mes "*がありました"</pre>
		<p>
			とすれば、変数aの1文字目が「*」のコードかどうかを手軽に調べることができます。
			「'」は、文字列を扱う「"(ダブルクォーテーション)」に似ていますが、実際は数値を示す
			ので間違えないようにしてください。
		</p>
		<p>
			ここで説明した内容を最後に、おさらいしておくと、
		</p>
		<ul>
			<li>peek関数で文字列の内容をコードとして取り出すことができる。</li>
			<li>poke命令で文字列の一部を指定したコードに書き替えることができる。</li>
		</ul>
		<p>
			ということになります。
			この概念と、文字コードの存在を知っておくだけでもいいと思います。
		</p>


		<h2 id="ABOUTTEXT">テキストファイルのしくみ</h2>
		<p>
			メモ帳やテキストエディタなどで開いたり保存したりしているテキストファイルですが、
			HSPでもこのテキストファイルを読み込んだり、作成することができるようになっています。
		</p>
		<p>
			テキストファイルとは何なのでしょうか? 実は、テキストファイルとは文字列の
			内容をそのままファイルにしただけのものなのです。
			いままで説明してきたように、変数に記憶された文字列はメモリ上のバッファに、コードという
			形で記憶されています。この内容をそのままbsave命令でファイルにセーブすると、
			テキストファイルができあがります。逆に言えば、テキストファイルの内容は単なる文字列に
			ほかならないのです。
		</p>
		<p>
			たとえば、
		</p>
		<pre>    a="TEXT FILE."
    bsave "test.txt",a</pre>
		<p>
			のようなスクリプトでも「TEXT FILE.」という内容のテキストファイルを作成できます。
			しかし、これだけだとファイルサイズがバッファのサイズと同じになってしまってムダが
			できてしまいます。文字列として使用している分だけをファイルにセーブするようにすれば
			完璧です。そこで、
		</p>
		<pre>    a="TEXT FILE."
    size=strlen(a)
    bsave "test.txt",a,size</pre>
		<p>
			上のように、strlen関数を使って文字列の長さを調べてから、そのサイズだけセーブするように
			すれば適切な長さのテキストファイルになります。
		</p>
		<p>
			同じ要領で、テキストファイルの読み込みもbload命令で行なうことができます。
			たとえば、
		</p>
		<pre>    sdim a,32000
    bload "test.txt",a
    mes a</pre>
		<p>
			このようなスクリプトになります。最初のsdim命令は、読み込んでくるテキストファイルが
			大きいかもしれないので約32000文字分のバッファを確保しています。これで、32000バイトの
			ファイルまでは読み込むことが可能です。bload命令でテキストファイルを読み込んで、
			最後にmes命令でその内容を表示しています。
		</p>
		<p>
			sdim命令で、文字列型の変数としてバッファを初期化しているので、mes命令ではバッファの
			内容を文字列として単純に表示します。バッファに読み込まれたテキストファイルもまた、
			文字列と同じなので、そのままちゃんと表示されるというわけです。
		</p>
		<p>
			テキストファイルは、文字列型変数のバッファをファイルにしたものと言ってきましたが、
			実は1つだけ異なる部分があります。それは、<em>最後に文字列の終わりを示すコード0が入っていない</em>
			という点です。これは、ファイルにセーブされたサイズが、すなわち文字列のサイズということ
			なので、終わりを示すコードが必要ないためです。
			（ただし、一部のテキストエディタではわかりやすいようにテキストファイルにも終了コード
			を入れてくれるものがあります。しかし、これは[EOF]と呼ばれるコードで、0ではなく、
			26になります。）
		</p>
		<p>
			HSPでテキストファイルを読み込んできた場合には、最後に0を入れる必要があるのに、そのまま
			使えています。これには、深ーいわけがあります。
		</p>
		<p>
			そのわけは、sdim命令のように、変数のバッファが確保された直後は、その内容がすべて
			0でクリアされているのです。このバッファに、終了コードの入っていないテキストファイルを
			読み込んでも、読み込まれたデータの続きには、必ず終了コードである0が入っているというわけです。
		</p>
		<p>
			そんなに深いわけでもなかったですね。ですから、一度テキストファイルを読み込んできたバッファに、
			もう1度別なテキストファイルを読み込んだ場合には、以前のテキストファイルよりも小さなサイズだった
			場合には、以前のデータが残ってしまいます。
			そうならないためには、テキストファイルを読み込む前に必ずsdim命令でバッファを
			確保するようにして、0でクリアする必要があるのです。
		</p>
		<p>
			実は、テキストファイルを読み込むには、もっと単純な方法があります。
			「メモリノートパッド命令」という仕組みを使えば、サイズや終端のコードを気にせず、
			テキストファイルを扱うことができます。この方法については、後で説明します。
		</p>


		<h2 id="ABOUTMULTILINE">複数行文字列のしくみ</h2>
		<p>
			HSPが扱う文字列は大きく分けて、1行だけの単純な文字列と、複数行を含む文字列とに分ける
			ことができます。この2つは、特に処理の上では違いがありません。単に、スクリプトを
			作るユーザーが意識しておけばいいだけのものです。
		</p>
		<p>
			複数行文字列とは、改行が含まれている文字列のことです。改行とは、それ以降を次の行に
			もっていくための、しるしみたいなものです。
			ためしに、
		</p>
		<pre>    a="ABC\nDEF"
    mes a</pre>
		<p>
			というスクリプトを実行してみると、
		</p>
		<pre>ABC
DEF</pre>
		<p>
			という2行にまたがって、メッセージが表示されます。
			これは、変数aの中に「\n」という改行のしるしが含まれているためです。
		</p>
		<p>
			いままで、文字にはコードがあり数値の形で、バッファに記憶されているということを
			言ってきましたが、改行はどうなっているのでしょうか。
			上の例にあげたスクリプトの場合、変数aの内容はバッファの中では、
		</p>
		<table class="keywordlist">
			<caption>バッファの内容</caption>
			<tr>
				<th>文字列</th>
				<td>A</td><td>B</td><td>C</td>
				<td colspan="2">\n</td>
				<td>D</td><td>E</td><td>F</td>
				<td>終了コード</td>
			</tr>
			<tr>
				<th>バッファの内容</th>
				<td>65</td><td>66</td><td>67</td>
				<td>13</td><td>10</td><td>68</td>
				<td>69</td><td>70</td><td>0</td>
			</tr>
		</table>
		<p>
			というデータが入っています。「\n」が改行を示すものですが、その部分は「13」「10」
			という2つのコードになっています。そして、これがまさに「改行コード」なのです。
			改行コードは、キーボードから入力できないので、HSPではかわりに「\n」という文字で
			表わすようにしていますが、実際は「13」と「10」の２つのコードが文字列の中に
			置かれています。
		</p>
		<p>
			困ったことに、改行コードにはいくつかの方言があります。MS-DOSやWindowsでは「13」「10」
			というコードですが、MacintoshのMacOSでは「13」のみです。また、UNIXでは「10」に
			なっています。HSPでは、改行コードとして、MS-DOSやWindowsの「13」「10」の他にも、
			MacOSの「13」だけの場合にも対応していますが、UNIXの改行コードには対応していません。
			そもそも多くのUNIXでは日本語のコードも違っているので、DOS形式へのコンバーターなどで
			あらかじめテキスト全体を変換しておいた方がいいでしょう。
		</p>
		
		<h2 id="ABOUTMEMNOTE">メモリノートパッド命令のしくみ</h2>
		<p>
			改行コードが入ることにより、文字列は非常に便利になりますが、複雑さは増します。
			テキストファイルには、当然改行コードが含まれてたくさんの行があるでしょうし、
			HSPのmesbox命令による入力ボックスも、改行を入れることができます。
			また、dirlist命令や、listbox命令、combox命令で使用する文字列にも改行コードが入って
			います。改行コードを入れることにより、たくさんの情報を整理することができる反面、
			文字列としての取り扱いはどんどんやりにくくなっていきます。
		</p>
		<p>
			そこでHSPでは、メモリノートパッド命令という一連の命令セットにより改行コードを
			含んだ文字列を比較的簡単に扱えるようにしています。複数の行があるテキストを
			扱う場合に問題となるのは、1行ごとに何かをチェックしたい場合や、1行単位で文字列を
			操作したくなった場合です。この1行単位での仕事では、2つのプロセスに分けると
			作業がすっきりとします。つまり、
		</p>
		<ul>
			<li>複数行から任意の行の内容だけを取り出す</li>
			<li>取り出した文字列に対してチェックをしたり、加工をする</li>
			<li>必要ならば、それをもとの行に戻す</li>
		</ul>
		<p>
			このように、複数行の文字列データから、1行だけの改行コードを含まない文字列を
			取り出してから作業をして、結果をふたたび戻すという手順であれば、改行コードについての
			面倒なチェックも必要なくなり効率もよくなります。
		</p>
		<p>
			そのための命令セットがメモリノートパッド命令です。
			これは、以下のような命令から成っています。
		</p>
		<table class="keywordlist">
			<caption>メモリーノートパッド命令 一覧</caption>
			<tr><th>命令</th><th>おもな機能</th><th>備考</th></tr>
			<tr><td>notesel</td><td>メモリノートパッドとして扱う変数の指定</td><td></td></tr>
			<tr><td>notemax</td><td>全体の行数を取得</td><td>システム変数として利用</td></tr>
			<tr><td>notesize</td><td>全体のサイズを取得</td><td>システム変数として利用</td></tr>
			<tr><td>noteload</td><td>テキストファイル読み込み</td><td></td></tr>
			<tr><td>notesave</td><td>テキストファイル書き出し</td><td></td></tr>
			<tr><td>noteadd</td><td>指定行に内容追加</td><td>挿入/上書きモードあり</td></tr>
			<tr><td>noteget</td><td>指定行の内容読み出し</td><td></td></tr>
			<tr><td>notedel</td><td>指定行の削除</td><td></td></tr>
			<tr><td>notefind</td><td>文字列の検索</td><td></td></tr>
		</table>
		<p>
			命令がいくつもありますが、使い方は難しくありません。
			基本的には、最初に文字列操作の対象となる変数名をnotesel命令で指定します。
			それから、もし1行読み出す場合にはnoteget命令を、行の内容を変更・追加する場合には、
			noteadd命令を使います。
		</p>
		<p>
			たとえば、複数行ある文字列を含む変数aで、最初の行にある
			文字列を取り出したい場合は、
		</p>
		<pre>    a="ABC\nDEF"
    notesel a
    noteget b,0
    mes b</pre>
		<p>
			のようになります。この時、注意しなければならないのは、noteget命令で指定する
			行インデックスは0から始まるので、1行目の指定が0になるということです。
			そして細かいことですが、noteget命令は読み出す先の変数を必ず文字列型にセットします。
			上の例で言うと、変数bがそれまで数値型であってもnoteget命令を実行した後は、
			文字列型になるということです。
		</p>
		<p>
			notemaxとrepeat～loop命令を使うことで、すべての行に対しての処理を効率的に
			記述できます。たとえば、
		</p>
		<pre>    a="ABC\nDEF\nGHI"
    notesel a
    repeat notemax
        noteget b,cnt
        mes "["+b+"]"
    loop</pre>
		<p>
			このスクリプトでは、変数aのすべての行の内容をカッコでくくった状態で表示させます。
			notemaxは、行がいくつあるかを調べて変数に返すシステム変数として使用することができます。
			ここで調べた回数だけ、repeat～loop命令でループさせます。このループ中は、
			システム変数cntが0から順番に数字が上がっていくので、noteget命令で読み出す
			行インデックスの指定に、システム変数cntを使えば各行を順番に取り出していけることになります。
		</p>
		<p>
			メモリノートパッド命令により、テキストファイルを扱うことも可能です。
			noteload命令は、テキストファイルを読み込む場合に、
			notesave命令は、テキストファイルを保存する場合に使います。
			たとえば、
		</p>
		<pre>    a="ABC\nDEF\nGHI"
    notesel a
    notesave "a.txt"</pre>
		<p>
			このスクリプトでは、変数aに代入されている内容を「a.txt」という名前のテキストファイルとして
			保存します。簡単ですね。
		</p>
		<p>
			逆に、テキストファイルを変数に読み込む場合には、以下のように使います。
		</p>
		<pre>    notesel a
    noteload "a.txt"
    mes a</pre>
		<p>
			noteload命令は、指定されたファイルをnotesel命令で指定された変数に読み込みます。
			文字列終端の終了コードや、変数のバッファ領域なども自動的に考慮されるようになっています。
		</p>

		<h2 id="FUNC">文字列操作関数</h2>
		<p>
			HSPには、文字列を便利に扱うための命令や関数がいくつか用意されています。
			ここでは、検索をするためのinstr関数と、文字列の一部を取り出すためのstrmid関数を紹介します。
			このドキュメントを読むと、同様の処理をpeek関数やpoke命令でも実現できることが
			わかると思いますが、そこは当然最初から機能がサポートされていた方がいいに決まってますよね。
		</p>
		<p>
			まず、strmid関数はだいたい以下のようになっています。
		</p>
		<pre class="quote">strmid(p1,p2,p3)         文字列の一部を取り出す

p1=変数名  : 取り出すもとの文字列が格納されている変数名
p2=0～(0)  : 取り出し始めのインデックス
p3=0～(0)  : 取り出す文字数</pre>
		<p>
			Microsoft系のN-BASICを使ったことのある人であれば、文字列の取り出しに
			LEFT$、RIGHT$、MID$という３つの関数があったのを覚えているかもしれません。
			これらは、それぞれ文字列の「左からn文字」「右からn文字」「n1文字目からn2文字」
			を取り出して、その内容を返すというものでしたが、strmid関数は、その3つの機能を
			合わせ持った命令です。
		</p>
		<p>
			p1に取り出す元の文字列が記憶されている変数名を指定して、
			p2で取り出し始める文字インデックス(0から始まる)、p3で取り出す文字数を
			指定するというものです。注意しなければいけないのは、p3の文字インデックスは、
			1文字目が0になり、2文字目が1…という0からの順番になっているということ。
			これで、たとえば変数aの一部を取り出す場合、
			「左からn文字」を取り出す場合は、<code>strmid( a,0,n )</code>となり、
			「右からn文字」の場合は、<code>strmid( a,-1,n )</code>となり、
			「n1文字目からn2文字」は、<code>strmid( a,n1-1,n2 )</code>	になります。
		</p>
		<p>
			もう1つは、文字列の中に、指定した文字列が含まれているかどうかを	調べる
			instr関数です。これはヘルプでは、
		</p>
		<pre class="quote">instr(p1,p2,"string")        文字列の検索をする

p1=変数名  : 検索される文字列が格納されている文字列型変数名
p2=0～(0)  : 検索を始めるインデックス
"string"   : 検索する文字列</pre>
		<p>
			というようになっています。
			p1で指定した文字列型変数の中に、"string"で指定した文字列があるかどうか調べて、
			文字インデックスを返します。
			結果は数値になるという点に注意してください。文字インデックスでは、
			文字列の始まり１文字目を0として、1,2,3...と順番に増えていきます。
			(strmid関数で指定するインデックスと同様)。
			もし、見つからなかった場合には-1が代入されます。
		</p>
		<p>
			また、p2で調べ始める文字インデックスを指定することができます（指定を省略
			した場合は、最初(0)からになります）。
			この場合、検索の結果は調べ始めた場所からのインデックスが返されるということに
			注意してください。文字列の最初からのインデックスではなくなります。
		</p>
		<p>
			これ以外にも、以下のような機能が標準で用意されています。
			詳しくは、それぞれの命令ヘルプを参照してみてください。
		</p>
		<table class="keywordlist" summary="文字列を扱う命令・関数を一覧形式で紹介しています。">
		<caption>文字列を扱う命令・関数</caption>
			<tr><th>キーワード</th><th>機能</th></tr>
			<tr><td>getstr</td><td>バッファから文字列読み出し</td></tr>
			<tr><td>getpath</td><td>パスの一部を取得</td></tr>
			<tr><td>strf</td><td>書式付き文字列に変換</td></tr>
			<tr><td>strtrim</td><td>指定した文字だけを取り除く</td></tr>
			<tr><td>split</td><td>文字列から分割された要素を代入</td></tr>
			<tr><td>strrep</td><td>特定の文字列を置き換える</td></tr>
			<tr><td>cnvwtos</td><td>unicodeを通常文字列に変換</td></tr>
			<tr><td>cnvstow</td><td>通常文字列をunicodeに変換</td></tr>
		</table>




		<h2 id="ABOUTJPN">日本語文字列のしくみ</h2>
		<p>
			いままで説明したことは、とりあえず半角の文字列。アスキーコード表の文字に関しての話です。
			HSPで用意された文字列操作に関する命令も、すべて文字の単位は半角文字になっています。
			扱う文字列が、英文字だけであれば問題はありません。
		</p>
		<p>
			しかし、これが日本語の全角文字を含んでいるとちょっとトリッキーになります。
			前にも言ったように、日本語は1バイト(256種類)では表わしきれないので、
			2バイト使って表現しています。
			つまり、英文字2文字分で日本語1文字なのです。しかしこれらは、混在できるようになっている
			ために、ちょっと複雑なルールがあります。次のようなルールです。
		</p>
		<ul>
			<li>コードが129～159か、224～252の範囲にある場合は、次の1バイトと合わせて1文字の全角コードとなる。</li>
		</ul>
		<p>
			つまり、コードの数値がある範囲にある時だけは、2文字分で1つとする特殊なルールを作ってあるわけです。
			これは、WindowsやMS-DOSにおいて有効なルールで、他のOSやインターネット上から持ってきたテキストでは
			通用しないことがあります。
		</p>
		<p>
			このような日本語文字コードのことを普通、「シフトJISコード」と呼んでいます。日本語は、
			2バイトで1文字ですから、日本語の文字コードを取り出す場合などはpeek関数を2回行なうか、
			wpeek関数を使う必要があります。ただし、wpeek関数は、「$81」「$24」(それぞれ16進数)
			という2バイトのコードがあった場合、「$2481」(16進数)のように、2バイトを逆転して
			1つの数値にしてしまうので注意が必要です。
		</p>
		<p>
			そんなこんなで、日本語コードを扱うのは英文字よりも少しやっかいです。
			ただし、英文字と日本語を混在させないなどの制限をつけてやれば、必ず2バイトで1文字という
			法則になり、文字を取り出したり、長さをチェックしたりする時には容易になるでしょう。
		</p>
		<p>
			日本語文字列は、unicode形式で扱われることが最近は増えてきました。
			HSPでは、HSPUTFランタイムによりunicode(UTF-8)形式を扱うことが可能です。
			ただし、Windowsで古くから扱われているテキストファイルはまだシフトJISのものも多く、
			unicodeと互換性がないため、場面によって使い分けることが望ましいと思います。
			( android,iOS,Linux,html5などの環境では、unicode(UTF-8)形式が標準で使用されています。)
		</p>


		<h2 id="LAST">最後に</h2>
		<p>
			このドキュメントでは、文字列のしくみを理解することで、より細か効率的に文字列を操作する
			方法について説明してきました。
		</p>
		<p>
			改行コードを含まない文字列に対してのアプローチと、それにメモリノートパッド命令を加える
			ことで、複数行に渡る文字列であっても効率的に処理することができるようになると思います。
			このドキュメントで、その作業が少しでも楽になってくれれば幸いです。
		</p>

		<!-- フッター -->
		<ul id="FOOTER">
			<li><a href="#CONTAINER">このページの1番上に戻る</a></li>
			<li><a href="../index.htm">ドキュメントの一覧に戻る</a></li>
			<li><a href="https://hsp.tv/">Go to HSPTV page</a></li>
		</ul>
		<a href="https://www.onionsoft.net/hsp/">
			<img src="img/onibtn.gif" width="147" height="50" alt="ONION software" id="ONIBTN">
		</a>
	</div><!-- container -->
</body>
</html>
