<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta http-equiv="Content-Language" content="ja">
	<meta http-equiv="Content-Style-Type" content="text/css">
	<meta http-equiv="Content-Script-Type" content="text/javascript">
	<meta name="author" content="OpenHSP3 Project（http://dev.onionsoft.net/trac/wiki）">
	<meta name="keywords" content="HSP,HSP3,HotSoupProcessor3,HSPTV">
	<meta name="description" content="Peasに関する情報を掲載">
	<link href="../main.css" rel="stylesheet" type="text/css" media="all">
	<title>Peasエディタマニュアル</title>
</head>
<body>
	<div id="CONTAINER">
		<!-- ヘッダー -->
		<p id="COPY">HSP : Hot Soup Processor ver3.6 / onion software 1997-2021(c)</p>
		<img src="hsp3ttl.jpg" alt="title" width="640" height="200">
		<h1>Peasエディタマニュアル</h1>

		<!-- 目次 -->
		<ol>
			<li><a href="#ABOUT">Peasエディタとは</a></li>
			<li><a href="#SET_PART">パーツの配置</a></li>
			<li><a href="#EXEC_SHORT">簡単なプログラムの実行</a></li>
			<li><a href="#PARTS_CTRL">パーツの管理</a></li>
			<li><a href="#LABEL">ラベルパーツ</a></li>
			<li><a href="#VAR">変数パーツ</a></li>
			<li><a href="#CAN">Peasエディタができること</a></li>
			<li><a href="#MAKE_PARTS">パーツの作成について</a></li>
			<li><a href="#LICENCE">著作権とライセンス</a></li>
		</ol>

		<h2 id="ABOUT">Peasエディタとは</h2>
		<img src="img/s_peas.jpg" width="320" height="249" alt="Peas editor" style="float:right;">
		<p>
			「Peasエディタ」は、プログラムの元となる要素(パーツ)を視覚的に配置して、
			自動的にHSPのスクリプトを生成するためのツールです。
		</p>
		<p>
			「Peas」のショートカットアイコンから起動するか、 HSP3がインストールされているフォルダの「ahtman.exe」を
			起動させることでPeasエディタを使用することができます。
		</p>
		<p>
			「Peasエディタ」は、基本的なスクリプトの流れを見た目にもわかるようにするほか、
			決まった要素だけの修正をスクリプトエディタを使わずに行なうことができ、
			今までプログラミングに触れてこなかった人や、初心者にとっての新しい選択肢となるものです。
		</p>


		<h2 id="SET_PART">パーツの配置</h2>
		<img src="img/s_peas_parts2.jpg" alt="parts" width="320" height="205" style="float:right;">
		<p>
			Peasエディタでは、画面上に置かれたパーツに従ってプログラムが作られます。
			画面上にパーツを配置するには、「追加」ボタンを押してください。
			配置することのできるパーツ一覧画面が表示されます。
			この中から、パーツを右クリックで選択すると、メインの画面上に配置されます。
		</p>
		<p>
			配置されたパーツは、マウスの左ボタンを押しながらドラッグすることで移動させることができます。
			パーツの位置は、どこに置かれていても問題ありません。
		</p>
		<p>
			パーツには、いくつかの種類があります。
			凹凸のあるジクソーパズルのようなパーツは、プログラムの流れに使用するもので、
			パーツ同士を線でつなぐことができます。線でつながれたパーツは、順番に内容が実行されます。
			詳しくは「プログラムの流れ」を参照してください。
		</p>
		<p>
			凹凸のないすっきりとしたパーツは、リソースパーツと呼ばれていて、線でつなげることはできません。
			そのかわりリソースパーツは、他のパーツからいつでも利用することができます。
			たとえば、音楽のリソースパーツを配置しておくことで、いつでもプログラム上から指定した
			音楽を流すことができるようになります。プログラム上で使用する素材を予約するようなものだと
			考えておくといいでしょう。
		</p>

		<h2 id="EXEC_SHORT">簡単なプログラムの実行</h2>
		<img src="img/s_peas_prop1.jpg" alt="home" width="336" height="189" style="float:right;">
		<p>
			実際に簡単なプログラムを作って動作させてみましょう。
			まず「追加」ボタンで、「ホーム」のパーツを配置してください。
			「ホーム」のパーツは、プログラムを開始するスタート地点となるもので、
			必ず最初に配置しなければなりません。
			「ホーム」のパーツを開くと、画面のような「プロパティ編集ウィンドウ」が表示されます。
			これは、「ホーム」のパーツに関する内容を編集するための画面で、
			自分で作りたいものに合わせて変更することができます。
			たとえば、「タイトル名」を変更すると、ウィンドウ上のタイトルバーに表示されるタイトルが変わります。
			内容の編集が終わったら、「OK」を押して編集内容を確定させてください。
			「プロパティ編集ウィンドウ」が出ている間は、メイン画面で他の操作はできなくなるので、注意してください。
		</p>
		<p>
			次に、「名前を付けて保存」ボタンを押してプロジェクトを保存してください。
			プログラムを動作させる場合には、プロジェクトに名前をつけて保存しておく必要があります。
			Peasエディタでは、標準で「マイドキュメント」フォルダが使用されます。
			ここでは、わかりやすいように「マイドキュメント」上に「テスト」等の名前でプロジェクトを保存してください。
		</p>
		<img src="img/s_peas_prop2.jpg" alt="parts select" width="336" height="189" style="float:right;">
		<p>
			続いて、画面に絵を出してみることにしましょう。
			あらかじめ、プロジェクトを保存した「マイドキュメント」フォルダに、bmpやjpeg形式の画像ファイルを
			１つコピーしておいてください。
			ここでは例として、HSP3.1のpeasサンプルフォルダにある「back.jpg」を使用します。
		</p>
		<p>
			メインの「追加」ボタンで「画像表示」のパーツを選択してください。
			既に配置されている「ホーム」に接続される形で、「画像表示」パーツが配置されます。
			「プロパティ編集ウィンドウ」が表示され、表示するための画像を入力する項目が出てくるはずです。
			ここで、さきほど用意した画像ファイルを指定します。
			ファイルの指定は、「選択」ボタンを押して、ファイル選択ダイアログの中で指定することができます。
			選択することができたら、あとは「OK」を押して確定させてください。
		</p>
		<p>
			これで、画像を表示するプログラムの流れが完成しました。
			配置されている「ホーム」と「画像表示」が線で接続されているのを確認してください。
			これは、プログラムのスタート地点であるホームの次に、「画像表示」が実行されることを示しています。
			画面上に配置されているパーツは、好きな位置に移動させて構いません。
			自分の見やすい形に自由に移動させることができます。
			ただし、あくまでも接続の線は、パーツの右側にある突起から出て、次のパーツの左側につながります。
			つまり、左から右に流れていくようにパーツを配置するのが基本になるので注意してください。
		</p>
		<p>
			ここまでできたら、メインの「実行」ボタンでプログラムを実際に動作させることができます。
			自分が指定したタイトルのウィンドウが表示され、その中に指定した画像ファイルが出ていれば成功です。
		</p>
		<p>
			もし内容を変更したり確認したい時には、パーツをクリックして選択した後、「編集」のボタンを押せば
			いつでも「プロパティ編集ウィンドウ」が出て内容を修正することができます。
		</p>
		<p>
			この作業を繰り返しながら、自分のプログラムを完成させるのが「Peasエディタ」のスタイルです。
			自分が配置したパーツの位置や内容は、すべてプロジェクトファイルに保存して、いつでも呼び出すことが
			できます。また、「実行」ボタンを押すと、プロジェクトファイルと同じフォルダに、
			プロジェクトファイルと同じ名前で拡張子が「.hsp」のスクリプトファイルが生成されます。
			このファイルは、「Peasエディタ」で編集した内容をHSPスクリプトに変換したもので、
			HSPスクリプトエディタから直接実行したり、実行ファイルを作成することができます。
		</p>
		<p>
			HSP3.1のpeasサンプルフォルダ(sample/peas)にも、いくつかのプロジェクトファイルが
			サンプルとして用意されていますので、参考にしてみてください。
		</p>

		<h2 id="PARTS_CTRL">パーツの管理</h2>
		<p>
			画面上に配置されたパーツは、自由に状態の変更を行なうことができます。
			パーツは「追加」ボタンによっていくつでも画面上に配置することができ、
			「削除」ボタンで選択したパーツを削除することができます。
		</p>
		<p>
			配置する画面は、ページ管理を行なっています。右上に表示されている「Page 1/3」が
			ページ情報を示しています。ページ情報には、「現在のページ番号/最大ページ番号」
			の形で表示されます。
			パーツの内容や実行とページは関係ありません。
			あくまでも、パーツが配置される場所が変わるだけのものです。
		</p>
		<p>
			ページは、メインの「←」「→」ボタンで移動できるほか、ページ数を指定して
			「ページ」ボタンを押して直接ジャンプすることも可能です。
			(最大ページ数は、ページ数を直接指定することで拡大されます。)
			また、いつでも「Home」ボタンでページ0に戻ることができます。
		</p>
		<p>
			パーツの接続と切断は、いつでも行なうことができます。
			基本的に、線でつながれたパーツは順番に実行されていき、線が切れた場所で停止します。
			パーツが選択された状態で「切断」ボタンを押すと、次のパーツとの接続が切れます。
			また、接続されていないパーツが選択された状態で「接続」ボタンを押して、
			「選択されたパーツを接続します。よろしいですか？」というダイアログが出ている時に、
			接続したいパーツを再度選択して「OK」を押すことで、２つのパーツが接続されます。
		</p>
			
		<h2 id="LABEL">ラベルパーツ</h2>
		<p>
			「ラベル」パーツは、プログラムの位置を示すために使用する目印のようなものです。
			「追加」ボタンから「ラベル」のパーツを配置することで、
			他の場所からジャンプする場合の目印を作ることができます。
		</p>
		<p>
			「ラベル」パーツには、「ジャンプ」のパーツや、「条件分岐」または「ボタン」などのパーツから
			指定することができます。
			実行時にジャンプが行なわれると、指定されたラベルから実行を続けます。
		</p>
		<p>
			ラベルパーツに似た機能を持つのが、「サブルーチン」パーツです。
			このパーツは、「ラベル」と同様に名前を付けて目印にすることができますが、
			このパーツに連結されたパーツの実行を終えた後に、呼び出し元に戻るためのサブルーチンとして
			機能させることができます。
			(分岐やジャンプの際に、種別を「サブルーチン呼び出し」にすることで、「サブルーチン」パーツを
			呼び出すことができます。)
		</p>

		<h2 id="VAR">変数パーツ</h2>
		<p>
			「変数」パーツは、プログラム中で内容を変更することのできる「入れ物」となるものです。
			パーツの追加から「リソース」のカテゴリを選択して、「変数」を選択することで、
			「変数」パーツを画面上に配置することができます。
		</p>
		<p>
			変数パーツは、数値や文字列などを保持していて、プログラムの実行中に
			「変数代入」などのパーツにより、その内容を変更することが可能です。
			また、変数が保持する内容をもとに処理を行なう「条件分岐」「変数表示」などが用意されています。
		</p>

		<h2 id="CAN">Peasエディタができること</h2>
		<p>
			Peasエディタは、視覚的にパーツを配置してスクリプトを生成することができる反面、
			HSPスクリプトエディタ等で直接スクリプトを入力する人にとっては、面倒だと感じる部分もあるでしょう。
		</p>
		<p>
			Peasエディタは、HSPのスクリプト作成環境を補助するためのもので、
			すべての作業をPeasエディタで行なうことは想定していません。
			しかし、流れの決まった作業や、ごく簡単なスクリプトの作成、プログラムの学習など、
			Peasエディタを効果的に利用する場面は少なくないと考えています。
		</p>
		<p>
			すでに動作しているHSPスクリプトのソースを、Peasエディタに対応したAHTファイルに変更することは、
			それほど難しくありません。
			たとえば、アドベンチャーゲームのスクリプトを、ユーザー変更可能な部分を編集できるように
			AHTファイルとして公開して、一般の人がPeasエディタだけでゲームの作成を行なう仕組みを
			提供することも可能です。
		</p>
		<p>
			HSPスクリプトを組める人は、より手軽に内容を修正できるAHTという形で提供を行ない、
			HSPスクリプトを組めない人は、このエディタから出発して、レベルアップすることができる。
			そんな環境を構築することが、Peasエディタの目標であり、今後もそこに向けてアップデートを行なっていく
			予定です。
		</p>

		<h2 id="MAKE_PARTS">パーツの作成について</h2>
		<p>
			Peasエディタで追加可能なパーツは、AHTファイルの仕様に従ってユーザーが自由に作成可能です。
			パーツは、ahtman.exeと同じ場所の「AHT」フォルダ以下から検索されます。
			このフォルダに、ahtファイルを追加することで、追加のパーツとして認識されます。
		</p>
		<p>
			AHTファイルは、基本的にHSPのソーススクリプトファイルと同様の形式になっており、
			コメントの記述をahtの仕様に合わせることで、パラメーターの編集項目などを設定することができます。
			AHTファイルについての詳細は、<a href="aht.txt">AHTマニュアル(aht.txt)</a>を参照してください。
		</p>


		<h2 id="LICENCE">著作権とライセンス</h2>
		<p>
			Peasエディタはonion softwareが著作権を持っています。
		</p>
		<p>
			「Peasエディタ」は、「HSP3」に同梱される形で配布されています。
			再配布の規定は、「HSP3」と同様です。無償で行なわれる限りは、自由に行なって頂いて構いません。 
		</p>
		<p>
			「Peasエディタ」のソーススクリプトは、HSPSDKに含まれており、
			誰でも自由に改造、改編、再配布を行なうことが可能です。
			再配布は、ソーススクリプト形態でも、実行ファイルの形態であっても構いません。
		</p>

		<!-- フッター -->
		<ul id="FOOTER">
			<li><a href="#CONTAINER">このページの1番上に戻る</a></li>
			<li><a href="../index.htm">ドキュメントの一覧に戻る</a></li>
			<li><a href="https://hsp.tv/">Go to HSPTV page</a></li>
		</ul>
		<a href="https://www.onionsoft.net/hsp/">
			<img src="img/onibtn.gif" width="147" height="50" alt="ONION software" id="ONIBTN">
		</a>
	</div><!-- container -->
</body>
</html>
