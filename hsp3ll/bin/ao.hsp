goto *MAIN
//#define global M_PI            3.14159265358979323846
#defcfunc drand
	return double(rnd(32768)) / 32768.0

#module
#defcfunc vdot array v0, array v1
	return v0.0 * v1.0 + v0.1 * v1.1 + v0.2 * v1.2

#deffunc vcross array c, array v0, array v1
	c(0) = v0(1) * v1(2) - v0(2) * v1(1)
	c(1) = v0(2) * v1(0) - v0(0) * v1(2)
	c(2) = v0(0) * v1(1) - v0(1) * v1(0)
	return

#deffunc vnormalize array c, local len
	len = sqrt(vdot(c, c))
	c(0) /= len
	c(1) /= len
	c(2) /= len
	return

#deffunc vprint array vec
	mes "(" + vec(0) + ", " + vec(1) + ", " + vec(2) + ")"
	return
	
#defcfunc vadot array v0, int i0, array v1, int i1
	return v0(i0, 0) * v1(i1, 0) + v0(i0, 1) * v1(i1, 1) + v0(i0, 2) * v1(i1, 2)

#deffunc vacross array c, int ci, array v0, int i0, array v1, int i1
	c(ci, 0) = v0(i0, 1) * v1(i1, 2) - v0(i0, 2) * v1(i1, 1)
	c(ci, 1) = v0(i0, 2) * v1(i1, 0) - v0(i0, 0) * v1(i1, 2)
	c(ci, 2) = v0(i0, 0) * v1(i1, 1) - v0(i0, 1) * v1(i1, 0)
	return
#deffunc vanormalize array c, int i, local len
	len = sqrt(vadot(c, i, c, i))
	c(i, 0) /= len
	c(i, 1) /= len
	c(i, 2) /= len
	return
#deffunc vaprint array vec, int i
	mes "(" + vec(i, 0) + ", " + vec(i, 1) + ", " + vec(i, 2) + ")"
	return
#global

#module
#deffunc ray_sphere_intersect array isect, array isect_p, array isect_n, array ray_org, array ray_dir, int no, local rs, local b, local c, local d, local t
	ddim rs, 3
	rs(0) = ray_org(0) - spheres_center@(no, 0)
	rs(1) = ray_org(1) - spheres_center@(no, 1)
	rs(2) = ray_org(2) - spheres_center@(no, 2)

	b = vdot(rs, ray_dir)
	c = vdot(rs, rs) - spheres_radius@(no) * spheres_radius@(no)
	d = b * b - c
	if (d > 0) {
		t = -b - sqrt(d)
//			color 255,0,0 : pos 0,0 : mes "d = " + d + ", " + t
		if ((t > 0) && (t < isect(0))) {
			isect(0) = t
			isect(1) += 1.0

			isect(2) = spheres_col@(no, 0)
			isect(3) = spheres_col@(no, 1)
			isect(4) = spheres_col@(no, 2)

			isect_p(0) = ray_org(0) + ray_dir(0) * t
			isect_p(1) = ray_org(1) + ray_dir(1) * t
			isect_p(2) = ray_org(2) + ray_dir(2) * t

			isect_n(0) = isect_p(0) - spheres_center@(no, 0)
			isect_n(1) = isect_p(1) - spheres_center@(no, 1)
			isect_n(2) = isect_p(2) - spheres_center@(no, 2)

			vnormalize(isect_n)
		}
	}
	return

#deffunc ray_plane_intersect array isect, array isect_p, array isect_n, array ray_org, array ray_dir, local rs, local d, local v, local t
	d = - vdot(plane_p@, plane_n@)
	v = vdot(ray_dir, plane_n@)

	if (absf(v) < 1.0e-17) {
		return
	}

	t = - (vdot(ray_org, plane_n@) + d) / v

	if ((t > 0) && (t < isect(0))) {
		isect(0) = t
		isect(1) += 1.0

		isect(2) = plane_col@(0)
		isect(3) = plane_col@(1)
		isect(4) = plane_col@(2)

		isect_p(0) = ray_org(0) + ray_dir(0) * t
		isect_p(1) = ray_org(1) + ray_dir(1) * t
		isect_p(2) = ray_org(2) + ray_dir(2) * t

		isect_n(0) = plane_n@(0)
		isect_n(1) = plane_n@(1)
		isect_n(2) = plane_n@(2)
		
//color 255, 0, 0 : mes " " + isect(2) + "." + isect(3) + "." + isect(4)
	}
	return

#deffunc ortho_basis array basis, array n
	basis(2, 0) = n(0)
	basis(2, 1) = n(1)
	basis(2, 2) = n(2)
	basis(1, 0) = 0.0
	basis(1, 1) = 0.0
	basis(1, 2) = 0.0

	if ((n(0) < 0.6) && (n(0) > -0.6)) {
		basis(1, 0) = 1.0
	} else : if ((n(1) < 0.6) && (n(1) > -0.6)) {
		basis(1, 1) = 1.0
	} else : if ((n(2) < 0.6) && (n(2) > -0.6)) {
		basis(1, 2) = 1.0
	} else {
		basis(1, 0) = 1.0
	}

	vacross basis, 0, basis, 1, basis, 2
	vanormalize basis, 0
	
	vacross basis, 1, basis, 2, basis, 0
	vanormalize basis, 1
	
	return
#define eps 0.0001

#deffunc ambient_occlusion array col, array isect, array isect_p, array isect_n,\
				local p, local occlusion, local theta, local phi,\
				local x, local y, local z, local rx, local ry, local rz,\
				local oray_org, local oray_dir, local occIsect, local occIsect_p, local occIsect_n

	ddim oray_org, 3
	ddim oray_dir, 3
	ddim occIsect, 5
	ddim occIsect_p, 3
	ddim occIsect_n, 3
	ddim p, 3
	ddim basis, 3, 3
	ddim occlusion, 3
	
	p(0) = isect_p(0) + eps * isect_n(0)
	p(1) = isect_p(1) + eps * isect_n(1)
	p(2) = isect_p(2) + eps * isect_n(2)
	
	ortho_basis basis, isect_n

	occlusion(0) = 0.0
	occlusion(1) = 0.0
	occlusion(2) = 0.0
	
	repeat nao_samples@
		j = cnt
		repeat nao_samples@
			i = cnt
			theta = sqrt(1.0 * drand())
			phi = 2.0 * M_PI * drand()

			x = cos(phi) * theta
			y = sin(phi) * theta
			z = sqrt(1.0 - theta * theta)

			rx = x * basis(0, 0) + y * basis(1, 0) + z * basis(2, 0)
			ry = x * basis(0, 1) + y * basis(1, 1) + z * basis(2, 1)
			rz = x * basis(0, 2) + y * basis(1, 2) + z * basis(2, 2)
			
			oray_org(0) = p(0)
			oray_org(1) = p(1)
			oray_org(2) = p(2)

			oray_dir(0) = rx
			oray_dir(1) = ry
			oray_dir(2) = rz
			
			occIsect(0) = 1.0e+17
			occIsect(1) = 0.0
			occIsect(2) = 0.0
			occIsect(3) = 0.0
			occIsect(4) = 0.0

			ray_sphere_intersect occIsect, occIsect_p, occIsect_n, oray_org, oray_dir, 0
			ray_sphere_intersect occIsect, occIsect_p, occIsect_n, oray_org, oray_dir, 1
			ray_sphere_intersect occIsect, occIsect_p, occIsect_n, oray_org, oray_dir, 2
			ray_plane_intersect occIsect, occIsect_p, occIsect_n, oray_org, oray_dir
			if (occIsect(1) > 0) {
				occlusion += 1.0
			}
		loop
	loop
	
	occlusion = double(nao_samples@ * nao_samples@ - occlusion) / double(nao_samples@ * nao_samples@)
	col(0) = occlusion
	col(1) = occlusion
	col(2) = occlusion
	return

#global


*MAIN
	w = 256
	h = 256
	nsubsamples = 2
	nao_samples = 8
	screen 0, w, h
	randomize

	/*repeat w * h
		x = int(drand() * w)
		y = int(drand() * h)
		
		color 0, 0, 255
		boxf x, y, x+1, y+1
	loop
	mes "OK"
	wait 1000 */
	repeat
	gosub *INIT
	gosub *RENDER

	await 100
	loop
	end

*INIT
	ddim spheres_center, 3, 3
	ddim spheres_col, 3, 3
	
	spheres_center(0, 0) = -2.0
	spheres_center(0, 1) =  0.0
	spheres_center(0, 2) = -3.5
	spheres_radius(0) = 0.5
	spheres_col(0, 0) = 1.0
	spheres_col(0, 1) = 0.0
	spheres_col(0, 2) = 0.0
	
	spheres_center(1, 0) = -0.5
	spheres_center(1, 1) =  0.0
	spheres_center(1, 2) = -3.0
	spheres_radius(1) = 0.5
	spheres_col(1, 0) = 0.0
	spheres_col(1, 1) = 1.0
	spheres_col(1, 2) = 0.0
	
	spheres_center(2, 0) =  1.0
	spheres_center(2, 1) =  0.0
	spheres_center(2, 2) = -2.2
	spheres_radius(2) = 0.5
	spheres_col(2, 0) = 0.0
	spheres_col(2, 1) = 0.0
	spheres_col(2, 2) = 1.0

	plane_p(0) =  0.0
	plane_p(1) = -0.5
	plane_p(2) =  0.0
	
	plane_n(0) =  0.0
	plane_n(1) =  1.0
	plane_n(2) =  0.0
	plane_col(0) = 1.0
	plane_col(1) = 1.5
	plane_col(2) = 1.0
	return

*RENDER
	ddim ray_org, 3
	ddim ray_dir, 3
	ddim isect_p, 3
	ddim isect_n, 3
	ddim col, 3
	starttime = (gettime(5) * 60 + gettime(6)) * 1000 + gettime(7)
		
	repeat h
		y = double(cnt)
//		cls
//		color 255,0,0 : pos 0,0 : mes "y = " + y
		repeat w
			x = double(cnt)
			cr = 0.0
			cg = 0.0
			cb = 0.0
			repeat nsubsamples
				v = double(cnt)
				repeat nsubsamples
					u = double(cnt)
					px =  (x + (u / nsubsamples) - (double(w) / 2)) / (double(w) / 2)
					py = -(y + (v / nsubsamples) - (double(h) / 2)) / (double(h) / 2)

					ray_org(0) = 0.0
					ray_org(1) = 0.0
					ray_org(2) = 0.0

					ray_dir(0) = px
					ray_dir(1) = py
					ray_dir(2) = -1.0

					vnormalize ray_dir

					isect(0) = 1.0e+17
					isect(1) = 0.0

					ray_sphere_intersect isect, isect_p, isect_n, ray_org, ray_dir, 0
					ray_sphere_intersect isect, isect_p, isect_n, ray_org, ray_dir, 1
					ray_sphere_intersect isect, isect_p, isect_n, ray_org, ray_dir, 2
					ray_plane_intersect isect, isect_p, isect_n, ray_org, ray_dir

					if (isect(1) > 0) {
						ambient_occlusion col, isect, isect_p, isect_n
//zz = 0.02 * isect_p(2) + 0.2
//cr += zz
						cr += col(0)
						cg += col(1)
						cb += col(2)
					}
				loop
			loop
			
			color limitf( cr.0 / nsubsamples.0 / nsubsamples.0, 0, 1 ) * 255, limitf( cg.0 / nsubsamples.0 / nsubsamples.0, 0, 1 ) * 255, limitf( cb.0 / nsubsamples.0 / nsubsamples.0, 0, 1 ) * 255
			boxf x, y, x+1, y+1
		loop
		await 0
	loop
	endtime = (gettime(5) * 60 + gettime(6)) * 1000 + gettime(7)
	color 255,255,255 : pos 0,20 : mes "->" + double(endtime - starttime) / 1000 + "sec"
	stop
	return
